# -*- coding: utf-8 -*-
"""week-9-homework.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pTc7pieS4XkrNNDET6FbqExAzF-oIJI4
"""
# import tflite_runtime.interpreter as tflite
import tensorflow.lite as tflite
from io import BytesIO
from urllib import request
import numpy as np
import os

from PIL import Image


# MODEL_NAME = os.getenv('MODEL_NAME', 'bees-wasps-v2.tflite')

def download_image(url):
    with request.urlopen(url) as resp:
        buffer = resp.read()
    stream = BytesIO(buffer)
    img = Image.open(stream)
    return img


def prepare_image(img, target_size):
    if img.mode != 'RGB':
        img = img.convert('RGB')
    img = img.resize(target_size, Image.NEAREST)
    return img


def prepare_input(img):
    x = np.array(img, dtype='float32')
    X = np.array([x])
    return X / 255


def predict(url_link):
    img = download_image(url_link)
    img = prepare_image(img, target_size=(150, 150))

    interpreter = tflite.Interpreter(model_path='bees-wasps-v2.tflite')
    interpreter.allocate_tensors()

    input_idx = interpreter.get_input_details()[0]['index']
    output_idx = interpreter.get_output_details()[0]['index']

    X = prepare_input(img)

    interpreter.set_tensor(input_idx, X)
    interpreter.invoke()

    pred = interpreter.get_tensor(output_idx)

    return float(pred[0, 0])


def lambda_handler(event, context):
    url = event['url']
    pred = predict(url)
    result = {
        'prediction': pred
    }

    return result
